pipeline {
    agent { label 'poc-jenkins-node' }
    
    environment {
        REGION = 'us-west-2'
        REPO_NAME = 'poc-dev-cluster-repo-2'
        IMAGE_URI = "940482452163.dkr.ecr.${REGION}.amazonaws.com/${REPO_NAME}"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                sh 'rm -rf *'
            }
        }

        stage('Checkout Application Code') {
            steps {
                checkout scmGit(branches: [[name: 'main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/mrraj1/ecs.git']])
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t $REPO_NAME:$BUILD_NUMBER .'
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    sh 'aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $IMAGE_URI'
                    sh 'docker tag $REPO_NAME:$BUILD_NUMBER $IMAGE_URI:$BUILD_NUMBER'
                    sh 'docker push $IMAGE_URI:$BUILD_NUMBER'
                    env.IMAGE_TAG = "$BUILD_NUMBER"
                }
            }
        }

        stage('Update K8S Manifests') {
            steps {
                dir('k8s-manifests') {
                    // Clean the directory before checkout
                    deleteDir()
                    
                    // Checkout the K8S manifests repository
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[
                            url: 'https://github.com/mrraj1/ecs.git',
                            credentialsId: 'gitlab-credentials-id-3'
                        ]],
                        extensions: [
                            [$class: 'CleanBeforeCheckout'],
                            [$class: 'LocalBranch', localBranch: 'main']
                        ]
                    ])

                    script {
                        withCredentials([usernamePassword(credentialsId: 'gitlab-credentials-id-3', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                            sh """
                                # Configure Git user info
                                git config user.email "jnbhol103@gmail.com"
                                git config user.name "Jenkins Pipeline"
                                
                                # Ensure we're on main branch
                                git checkout main
                                
                                # Show current deployment file
                                cat Kubernetes/deployment.yml
                                
                                # Create backup of deployment file
                                cp Kubernetes/deployment.yml Kubernetes/deployment.yml.bak
                                
                                # Update the image in deployment.yml with improved sed command
                                sed -i -E "s|image:.*|image: ${IMAGE_URI}:${BUILD_NUMBER}|g" Kubernetes/deployment.yml
                                
                                # Verify the update
                                if ! grep -q "image: ${IMAGE_URI}:${BUILD_NUMBER}" Kubernetes/deployment.yml; then
                                    echo "Failed to update deployment.yml"
                                    cp Kubernetes/deployment.yml.bak Kubernetes/deployment.yml
                                    rm Kubernetes/deployment.yml.bak
                                    exit 1
                                fi
                                
                                # Remove backup
                                rm Kubernetes/deployment.yml.bak
                                
                                # Show updated deployment file
                                cat Kubernetes/deployment.yml
                                
                                # Stage and commit changes
                                git add Kubernetes/deployment.yml
                                git diff --cached
                                
                                # Only commit and push if there are changes
                                if git diff --cached --quiet; then
                                    echo "No changes to commit"
                                else
                                    git commit -m "Update deployment image to ${IMAGE_URI}:${BUILD_NUMBER}"
                                    
                                    # Set remote with credentials and push
                                    git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/mrraj1/ecs.git
                                    git push origin main
                                fi
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
